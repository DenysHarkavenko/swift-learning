import Foundation

var historicalFigures: [String: (lifeSpan: String, occupation: String)] = [
    "–¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ": ("1814‚Äì1861", "–ü–æ–µ—Ç, —Ö—É–¥–æ–∂–Ω–∏–∫, –≥—Ä–æ–º–∞–¥—Å—å–∫–∏–π –¥—ñ—è—á"),
    "–õ–µ—Å—è –£–∫—Ä–∞—ó–Ω–∫–∞": ("1871‚Äì1913", "–ü–æ–µ—Ç–µ—Å–∞, –¥—Ä–∞–º–∞—Ç—É—Ä–≥, –≥—Ä–æ–º–∞–¥—Å—å–∫–∞ –¥—ñ—è—á–∫–∞"),
    "–ë–æ–≥–¥–∞–Ω –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π": ("1595‚Äì1657", "–ì–µ—Ç—å–º–∞–Ω, –¥–µ—Ä–∂–∞–≤–Ω–∏–π –¥—ñ—è—á"),
    "–Ü–≤–∞–Ω –§—Ä–∞–Ω–∫–æ": ("1856‚Äì1916", "–ü–æ–µ—Ç, –ø–∏—Å—å–º–µ–Ω–Ω–∏–∫, –ø—É–±–ª—ñ—Ü–∏—Å—Ç"),
    "–ú–∏—Ö–∞–π–ª–æ –ì—Ä—É—à–µ–≤—Å—å–∫–∏–π": ("1866‚Äì1934", "–Ü—Å—Ç–æ—Ä–∏–∫, –ø–æ–ª—ñ—Ç–∏–∫"),
    "–ü–∏–ª–∏–ø –û—Ä–ª–∏–∫": ("1672‚Äì1742", "–ì–µ—Ç—å–º–∞–Ω, –∞–≤—Ç–æ—Ä –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—ó")
]

func printFiguresByOccupation(keyword: String) {
    print("–ü–æ—Å—Ç–∞—Ç—ñ –∑ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—é, —â–æ –º—ñ—Å—Ç–∏—Ç—å '\(keyword)':")
    for (name, figure) in historicalFigures {
        if figure.occupation.lowercased().contains(keyword.lowercased()) {
            print("‚Äî \(name): \(figure.occupation)")
        }
    }
}

func countLiteraryFigures() {
    let keywords = ["–ø–æ–µ—Ç", "–ø–æ–µ—Ç–µ—Å–∞", "–ø–∏—Å—å–º–µ–Ω–Ω–∏–∫", "–¥—Ä–∞–º–∞—Ç—É—Ä–≥"]
    var count = 0
    for (_, figure) in historicalFigures {
        let occupation = figure.occupation.lowercased()
        if keywords.contains(where: { occupation.contains($0) }) {
            count += 1
        }
    }
    print("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ—è—á—ñ–≤, –ø–æ–≤‚Äô—è–∑–∞–Ω–∏—Ö –∑ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–æ—é: \(count)")
}

func findOldestFigure() {
    var oldestYear = Int.max
    var oldestName = ""
    for (name, figure) in historicalFigures {
        let components = figure.lifeSpan.components(separatedBy: "‚Äì")
        if let birthYearStr = components.first, let birthYear = Int(birthYearStr) {
            if birthYear < oldestYear {
                oldestYear = birthYear
                oldestName = name
            }
        }
    }
    if oldestName != "" {
        print("–ù–∞–π—Ä–∞–Ω—ñ—à–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–∞ –ø–æ—Å—Ç–∞—Ç—å: \(oldestName) (\(oldestYear))")
    }
}

func randomFigure() -> (name: String, description: String) {
    let allKeys = Array(historicalFigures.keys)
    if let randomName = allKeys.randomElement(), let figure = historicalFigures[randomName] {
        let description = "–Ü–º'—è: \(randomName), –†–æ–∫–∏ –∂–∏—Ç—Ç—è: \(figure.lifeSpan), –î—ñ—è–ª—å–Ω—ñ—Å—Ç—å: \(figure.occupation)"
        return (randomName, description)
    }
    return ("–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
}

func quizFigure(guess name: String) -> (isCorrect: Bool, points: Int) {
    let random = randomFigure()
    print("–•—Ç–æ —Ü—è –ø–æ—Å—Ç–∞—Ç—å?\n\(random.description)")
    
    switch name.lowercased() {
    case random.name.lowercased():
        print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return (true, 10)
    default:
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –¶–µ –±—É–≤(–ª–∞) \(random.name).")
        return (false, 0)
    }
}


print("üü¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—é (–∫–ª—é—á: '–ø–æ–µ—Ç'):")
printFiguresByOccupation(keyword: "–ø–æ–µ—Ç")

print("\nüü® –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∏—Ö –¥—ñ—è—á—ñ–≤:")
countLiteraryFigures()

print("\nüüß –ù–∞–π—Ä–∞–Ω—ñ—à–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–∞ –ø–æ—Å—Ç–∞—Ç—å:")
findOldestFigure()

print("\nüü© –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ—Å—Ç–∞—Ç—å:")
let random = randomFigure()
print(random.description)

print("\nüü• –ú—ñ–Ω—ñ-–≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞ (5 –∑–∞–ø–∏—Ç–∞–Ω—å):")
let simulatedAnswers = ["–¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ", "–õ–µ—Å—è –£–∫—Ä–∞—ó–Ω–∫–∞", "–ë–æ–≥–¥–∞–Ω –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π", "–Ü–≤–∞–Ω –§—Ä–∞–Ω–∫–æ", "–ü–∏–ª–∏–ø –û—Ä–ª–∏–∫"]
var totalPoints = 0

for i in 0..<5 {
    print("\n–ó–∞–ø–∏—Ç–∞–Ω–Ω—è \(i + 1):")
    let result = quizFigure(guess: simulatedAnswers[i])
    totalPoints += result.points
}
print("\nüéØ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: \(totalPoints) —ñ–∑ 50")
